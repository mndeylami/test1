import { Option } from '../utils/Option';
export declare type FeedFilterFunction<Line> = (line: Line, index: number, instanceID: string) => boolean;
export declare class Feeder<T> {
    instanceID: string;
    private lines;
    private pointer;
    private filters;
    private resetOnEnd;
    private shuffleAfterLoad;
    constructor(instanceID?: string, lines?: T[], pointer?: number, filters?: FeedFilterFunction<T>[]);
    append(lines: T[]): Feeder<T>;
    /**
     * Configures the feeder to reset at the end, creating a repeating loop
     */
    circular(loop?: boolean): Feeder<T>;
    shuffle(shuffle?: boolean): Feeder<T>;
    filter(func: FeedFilterFunction<T>): Feeder<T>;
    /**
     * Advances the feed by one iteration
     */
    feed(): Option<T>;
    /**
     * Reads the data at the current cursor without advancing
     */
    peek(): Option<T>;
    reset(): void;
    readonly size: number;
    readonly isComplete: boolean;
    readonly isStart: boolean;
    readonly isEmpty: boolean;
    toString(): string;
}
