"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Loader_1 = require("./Loader");
const TestData_1 = require("./TestData");
class TestDataLoaders {
    constructor(workRoot) {
        this.workRoot = workRoot;
    }
    /**
     * Loads a standard Javascript array of data objects
     */
    fromData(lines) {
        let loader = new Loader_1.DataLoader(lines);
        return new TestData_1.TestDataSource(loader);
    }
    /**
     * Loads test data from a CSV file, returning a `<[TestDataSource]>` instance.
     */
    fromCSV(filename, separator = ',') {
        let loader = new Loader_1.CSVLoader(this.workRoot.testData(filename), separator, filename);
        return new TestData_1.TestDataSource(loader);
    }
    /**
     * Loads data from a JSON ffile
     */
    fromJSON(filename) {
        let loader = new Loader_1.JSONLoader(this.workRoot.testData(filename), filename);
        return new TestData_1.TestDataSource(loader);
    }
}
exports.TestDataLoaders = TestDataLoaders;
class NullTestDataLoaders {
    fromData(lines) {
        return new TestData_1.TestDataSource(new Loader_1.NullLoader());
    }
    fromCSV(filename, separator = ',') {
        return new TestData_1.TestDataSource(new Loader_1.NullLoader());
    }
    fromJSON(filename) {
        return new TestData_1.TestDataSource(new Loader_1.NullLoader());
    }
}
exports.NullTestDataLoaders = NullTestDataLoaders;
class BoundTestDataLoaders {
    constructor(target, workRoot) {
        this.target = target;
        this.innerLoaders = new TestDataLoaders(workRoot);
    }
    fromData(lines) {
        return (this.target.testData = this.innerLoaders.fromData(lines));
    }
    fromCSV(filename, separator = ',') {
        return (this.target.testData = this.innerLoaders.fromCSV(filename, separator));
    }
    fromJSON(filename) {
        return (this.target.testData = this.innerLoaders.fromJSON(filename));
    }
}
exports.BoundTestDataLoaders = BoundTestDataLoaders;
