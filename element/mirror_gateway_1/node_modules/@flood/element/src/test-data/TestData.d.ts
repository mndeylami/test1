import { Option } from '../utils/Option';
import { Feeder, FeedFilterFunction } from './Feeder';
import { Loader } from './Loader';
/**
 * A `TestDataFactory` is available to be imported into your test script as `TestData`. Use this to load a <[TestDataSource]> which provides new test data to each iteration of your test.
 *
 * TODO
 * Files should be uploaded to ...
 */
export interface TestDataFactory {
    /**
     * Loads a standard Javascript array of data objects
     *
     * @param objects an array of data objects
     */
    fromData<TRow>(objects: TRow[]): TestDataSource<TRow>;
    /**
     * Loads test data from a CSV file, returning a `TestData` instance.
     *
     * @param filename the CSV to load
     * @param separator (default: `,`) CSV separator to use
     */
    fromCSV<TRow>(filename: string, separator: string): TestDataSource<TRow>;
    /**
     * Loads data from a JSON ffile
     *
     * @param filename the JSON to load.
     */
    fromJSON<TRow>(filename: string): TestDataSource<TRow>;
}
/**
 * TestDataSource is the instance returned by <[TestDataFactory]>'s methods.
 *
 * Call TestDataSource's methods to configure your data source:
 *
 * ```typescript
 * import { step, Browser, TestData, TestSettings } from '@flood/element'
 * export const settings: TestSettings = {
 *   loopCount: -1
 * }
 *
 * interface Row {
 *   username: string
 *   userID: number
 * }
 * TestData.fromCSV<Row>('users.csv')
 *   .circular(false) // Switch off circular data iteration.
 *                    // By default, when the end of the data is reached, it wraps to the beginning.
 *   .shuffle()       // Shuffle the data
 *
 * export default () => {
 *    step('Step 1', async (browser: Browser, row: Row) => {
 *      // for each loop, a different line from user.csv will be available as `row`
 *    })
 * }
 * ```
 */
export declare class TestDataSource<T> {
    /**
     * @internal
     */
    feeder: Feeder<T>;
    /**
     * @internal
     */
    instanceID: string;
    /**
     * @internal
     */
    private loader;
    constructor(loader: Loader<T>);
    /**
     * @internal
     */
    setInstanceID(id: string): void;
    /**
     * @internal
     */
    load(): Promise<void>;
    /**
     * Instructs the data feeder to repeat the data set when it reaches the end. TestData is circular by default; use this to turn circular data off.
     *
     * @param circular Default: true. Pass `false` to disable.
     */
    circular(circular?: boolean): TestDataSource<T>;
    /**
     * Shuffles the data set using the Fisher-Yates method. Use this to randomise the order of your data. This will always be applied after filtering.
     * @param shuffle Default: true. Pass `false` to disable.
     */
    shuffle(shuffle?: boolean): TestDataSource<T>;
    /**
     * Adds a filter to apply against each line in the data set.
     *
     * Filters can be chained, and will be run in order only if the previous ffilter passed.
     *
     * Example:
     * ```typescript
     * type Row = { browser: string, email: string }
     * TestData.fromCSV("users.csv").filter((line, index, browserID) => line.browser === browserID)
     * ```
     *
     * @param func filter function to compare each line
     */
    filter(func: FeedFilterFunction<T>): TestDataSource<T>;
    /**
     * @internal
     */
    feed(): Option<T>;
    /**
     * @internal
     */
    peek(): Option<T>;
    /**
     * @internal
     */
    readonly size: number;
    /**
     * @internal
     */
    readonly isComplete: boolean;
    /**
     * @internal
     */
    readonly isEmpty: boolean;
    /**
     * @internal
     */
    readonly isStart: boolean;
    /**
     * @internal
     */
    toString(): string;
}
