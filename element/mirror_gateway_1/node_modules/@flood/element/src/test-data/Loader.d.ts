export declare abstract class Loader<T> {
    filePath: string;
    requestedFilename: string;
    isSet: boolean;
    lines: T[];
    isLoaded: boolean;
    constructor(filePath: string, requestedFilename: string);
    abstract load(): Promise<void>;
}
export declare class NullLoader<T> extends Loader<T> {
    constructor();
    load(): Promise<void>;
}
export declare class DataLoader<T> extends Loader<T> {
    lines: T[];
    constructor(lines: T[]);
    load(): Promise<void>;
    toString(): string;
}
export declare class JSONLoader<T> extends Loader<T> {
    load(): Promise<void>;
    toString(): string;
}
export declare class CSVLoader<T> extends Loader<T> {
    filePath: string;
    private separator;
    constructor(filePath: string, separator: string, requestedFilename: string);
    load(): Promise<void>;
    toString(): string;
}
