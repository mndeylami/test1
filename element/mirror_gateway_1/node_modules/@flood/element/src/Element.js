"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Puppeteer_1 = require("./driver/Puppeteer");
const Runner_1 = require("./Runner");
const TestScript_1 = require("./TestScript");
const EvaluatedScript_1 = require("./runtime/EvaluatedScript");
function runUntilExit(fn) {
    fn()
        .then(() => {
        console.log('process exited');
        process.exit(0);
    })
        .catch(err => {
        console.log('process exited - with error');
        console.error(err);
        process.exit(1);
    });
}
exports.runUntilExit = runUntilExit;
async function runCommandLine(opts) {
    let { logger, testScript, clientFactory } = opts;
    // TODO proper types for args
    let runnerClass;
    if (opts.persistentRunner) {
        runnerClass = Runner_1.PersistentRunner;
    }
    else {
        runnerClass = Runner_1.Runner;
    }
    const runner = new runnerClass(clientFactory || Puppeteer_1.launch, opts.testCommander, opts.reporter, logger, opts.testSettingOverrides, {
        headless: opts.headless,
        devtools: opts.devtools,
        sandbox: opts.sandbox,
        chromeVersion: opts.chromeVersion,
    }, opts.testObserverFactory);
    const installSignalHandlers = true;
    if (installSignalHandlers) {
        process.on('SIGINT', async () => {
            logger.debug('Received SIGINT');
            await runner.stop();
        });
        process.once('SIGUSR2', async () => {
            // Usually received by nodemon on file change
            logger.debug('Received SIGUSR2');
            await runner.stop();
            process.kill(process.pid, 'SIGUSR2');
        });
    }
    logger.debug(`Loading test script: ${testScript}`);
    let testScriptOptions = {
        stricterTypeChecking: opts.strictCompilation,
        traceResolution: false,
    };
    const testScriptFactory = async () => {
        return new EvaluatedScript_1.EvaluatedScript(opts.runEnv, await TestScript_1.mustCompileFile(testScript, testScriptOptions));
    };
    await runner.run(testScriptFactory);
}
exports.runCommandLine = runCommandLine;
