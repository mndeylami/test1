import { VMScript } from 'vm2';
import { Callsite } from './test-script/SourceUnmapper';
export interface Detail {
    callsite: string;
    callContext: string | null;
    asString: string;
    unmappedStack: string[];
    doc: string | null;
    causeAsString: string | undefined;
    causeStack: string | undefined;
}
export declare class TestScriptError extends Error {
    callsite: Callsite | undefined;
    unmappedStack: string[];
    originalError: Error;
    stackWhenThrown: string;
    constructor(message: string, originalStack: string, callsite: Callsite | undefined, unmappedStack: string[], originalError: Error);
    readonly hasDoc: boolean;
    readonly errorDoc: string | null;
    readonly callContext: string | null;
    readonly cause: Error;
    toDetailObject(includeVerbose?: boolean): Detail;
    toStringNodeFormat(): string;
    toVerboseString(): string;
    callsiteString(): string;
    toJSON(): {
        message: string;
        stack: string;
    };
}
export interface TestScriptOptions {
    stricterTypeChecking: boolean;
    traceResolution: boolean;
}
export declare const TestScriptDefaultOptions: TestScriptOptions;
export interface TestScriptErrorMapper {
    isScriptError(error: Error): boolean;
    liftError(error: Error): TestScriptError;
    maybeLiftError(error: Error): Error;
    filterAndUnmapStack(stack: string | Error | undefined): string[];
}
export interface ITestScript extends TestScriptErrorMapper {
    sandboxedFilename: string;
    vmScript: VMScript;
    source: string;
    sourceMap: string;
    formattedErrorString: string;
    hasErrors: boolean;
    compile(): Promise<ITestScript>;
    isFloodElementCorrectlyImported: boolean;
    testName: string;
    testDescription: string;
}
export declare function compileString(source: string, filename: string, testScriptOptions?: TestScriptOptions): Promise<ITestScript>;
export declare function compileFile(filename: string, testScriptOptions?: TestScriptOptions): Promise<ITestScript | undefined>;
export declare function mustCompileString(source: string, filename: string, testScriptOptions?: TestScriptOptions): Promise<ITestScript>;
export declare function mustCompileFile(filename: string, testScriptOptions?: TestScriptOptions): Promise<ITestScript>;
