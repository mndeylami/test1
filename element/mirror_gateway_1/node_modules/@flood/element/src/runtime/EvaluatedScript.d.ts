import { Step } from './Step';
import Test from './Test';
import { ITestScript, TestScriptErrorMapper, TestScriptError } from '../TestScript';
import { ConcreteTestSettings } from './Settings';
import { RuntimeEnvironment } from '../runtime-environment/types';
import { TestDataSource, TestDataFactory } from '../test-data/TestData';
export declare class EvaluatedScript implements TestScriptErrorMapper {
    runEnv: RuntimeEnvironment;
    script: ITestScript;
    steps: Step[];
    settings: ConcreteTestSettings;
    private vm;
    constructor(runEnv: RuntimeEnvironment, script: ITestScript, lazyEval?: boolean);
    static mustCompileFile(path: string, runEnv: RuntimeEnvironment): Promise<EvaluatedScript>;
    isScriptError(error: Error): boolean;
    maybeLiftError(error: Error): Error;
    liftError(error: Error): TestScriptError;
    filterAndUnmapStack(stack: string | Error | undefined): string[];
    bindTest(test: Test): void;
    beforeTestRun(): Promise<void>;
    private _testDataLoaders;
    readonly testDataLoaders: TestDataFactory;
    private _testData;
    testData: TestDataSource<any>;
    readonly sequence: number;
    evaluate(): EvaluatedScript;
}
