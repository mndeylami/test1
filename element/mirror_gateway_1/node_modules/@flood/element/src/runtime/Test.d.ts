import { EvaluatedScript } from './EvaluatedScript';
import { Browser } from './Browser';
import { IReporter } from './../Reporter';
import { ObjectTrace } from '../utils/ObjectTrace';
import { TestObserver } from './test-observers/Observer';
import { AnyErrorData } from './errors/Types';
import { StructuredError } from '../utils/StructuredError';
import { Step } from './Step';
import { CancellationToken } from '../utils/CancellationToken';
import { IPuppeteerClient } from '../driver/Puppeteer';
import { ScreenshotOptions } from 'puppeteer';
import { TestSettings, ConcreteTestSettings } from './Settings';
export default class Test {
    client: IPuppeteerClient;
    script: EvaluatedScript;
    reporter: IReporter;
    testObserverFactory: (t: TestObserver) => TestObserver;
    settings: ConcreteTestSettings;
    steps: Step[];
    runningBrowser: Browser<Step> | null;
    private testCancel;
    iteration: number;
    failed: boolean;
    readonly skipping: boolean;
    constructor(client: IPuppeteerClient, script: EvaluatedScript, reporter: IReporter, settingsOverride: TestSettings, testObserverFactory?: (t: TestObserver) => TestObserver);
    cancel(): Promise<void>;
    beforeRun(): Promise<void>;
    /**
     * Runs the group of steps
     * @return {Promise<void|Error>}
     */
    run(iteration?: number): Promise<void> | never;
    runWithCancellation(iteration: number, cancelToken: CancellationToken): Promise<void> | never;
    readonly currentURL: string;
    runStep(testObserver: TestObserver, browser: Browser<Step>, step: Step, testDataRecord: any): Promise<void>;
    liftToStructuredError(error: Error): StructuredError<AnyErrorData>;
    readonly stepNames: string[];
    doStepDelay(): Promise<void>;
    willRunCommand(testObserver: TestObserver, browser: Browser<Step>, command: string): Promise<void>;
    didRunCommand(testObserver: TestObserver, browser: Browser<Step>, command: string): Promise<void>;
    takeScreenshot(options?: ScreenshotOptions): Promise<never[] | undefined>;
    fetchScreenshots(): Promise<string[]>;
    newTrace(step: Step): ObjectTrace;
}
