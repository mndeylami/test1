"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const CustomDeviceDescriptors_1 = require("../utils/CustomDeviceDescriptors");
// Waits is seconds
exports.DEFAULT_STEP_WAIT_SECONDS = 5;
exports.DEFAULT_ACTION_WAIT_SECONDS = 0.5;
/**
 * The default settings for a Test. Any settings you provide are merged into these defaults.
 */
exports.DEFAULT_SETTINGS = {
    duration: -1,
    loopCount: Infinity,
    actionDelay: 2,
    stepDelay: 6,
    screenshotOnFailure: true,
    clearCookies: true,
    clearCache: false,
    waitTimeout: 30,
    responseTimeMeasurement: 'step',
    /**
     * by default, don't filter any console messages from the browser
     */
    consoleFilter: [],
    userAgent: CustomDeviceDescriptors_1.default['Chrome Desktop Large'].userAgent,
    device: 'Chrome Desktop Large',
    ignoreHTTPSErrors: false,
    chromeVersion: 'puppeteer',
};
/**
 * @internal
 */
function normalizeSettings(settings) {
    // Convert user inputted seconds to milliseconds
    if (typeof settings.waitTimeout === 'number' && settings.waitTimeout > 1e3) {
        settings.waitTimeout = settings.waitTimeout / 1e3;
    }
    else if (Number(settings.waitTimeout) === 0) {
        settings.waitTimeout = 30;
    }
    // Ensure action delay is stored in seconds (assuming any value greater than 60 seconds would be ms)
    if (typeof settings.actionDelay === 'number' && settings.actionDelay > 60) {
        settings.actionDelay = settings.actionDelay / 1e3;
    }
    else if (Number(settings.actionDelay) === 0) {
        settings.actionDelay = exports.DEFAULT_ACTION_WAIT_SECONDS;
    }
    // Ensure step delay is stored in seconds
    if (typeof settings.stepDelay === 'number' && settings.stepDelay > 60) {
        settings.stepDelay = settings.stepDelay / 1e3;
    }
    else if (Number(settings.stepDelay) === 0) {
        settings.actionDelay = exports.DEFAULT_STEP_WAIT_SECONDS;
    }
    return settings;
}
exports.normalizeSettings = normalizeSettings;
