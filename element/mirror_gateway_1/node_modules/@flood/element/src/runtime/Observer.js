"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const debugFactory = require("debug");
const debug = debugFactory('element:runtime:observer');
class Observer {
    constructor(reporter, networkRecorder) {
        this.reporter = reporter;
        this.networkRecorder = networkRecorder;
        this.consoleFilters = [];
        this.requests = new Set();
        this.attached = false;
    }
    attachToNetworkRecorder() {
        if (this.attached)
            return;
        debug('attachToNetworkRecorder()');
        this.attached = true;
        this.failedRequests = [];
        this.requests = new Set();
        this.attachPageEvents();
    }
    attachPageEvents() {
        this.networkRecorder.attachEvent('frameattached', event => this.onFrameAttached(event));
        this.networkRecorder.attachEvent('domcontentloaded', event => this.onDOMContentLoaded(event));
        this.networkRecorder.attachEvent('Page.frameScheduledNavigation', event => this.onNavigate(event));
        this.networkRecorder.attachEvent('Page.frameStartedLoading', event => this.onFrameStartedLoading(event));
        this.networkRecorder.attachEvent('Page.frameStoppedLoading', event => this.onFrameStoppedLoading(event));
        this.networkRecorder.attachEvent('Page.frameClearedScheduledNavigation', event => this.onFrameClearedScheduledNavigation(event));
        // this.networkRecorder.attachEvent('response', event => this.onNetworkResponse(event))
        this.networkRecorder.attachEvent('Network.requestWillBeSent', event => this.onRawNetworkRequestWillBeSent(event));
        this.networkRecorder.attachEvent('Network.responseReceived', event => this.onRawNetworkResponse(event));
        this.networkRecorder.attachEvent('Network.loadingFinished', event => this.onRawNetworkLoadingFinished(event));
        this.networkRecorder.attachEvent('Network.loadingFailed', event => this.onRawNetworkLoadingFailed(event));
        this.networkRecorder.attachEvent('console', msg => {
            if (this.consoleFilters.length == 0 || !this.consoleFilters.includes(msg.type())) {
                this.reporter.testScriptConsole(msg.type(), msg.text());
            }
        });
    }
    onRawNetworkRequestWillBeSent(payload) {
        debug('onRawNetworkRequestWillBeSent', payload.requestId);
        this.requests.add(payload.requestId);
        this.networkRecorder.addPendingTask(this.networkRecorder.recordRequest(payload));
    }
    onRawNetworkResponse(payload) {
        debug('onRawNetworkResponse', payload.requestId);
        if (this.requests.has(payload.requestId))
            this.networkRecorder.addPendingTask(this.networkRecorder.recordResponse(payload));
    }
    onRawNetworkLoadingFinished({ requestId, encodedDataLength, timestamp }) {
        debug('onRawNetworkLoadingFinished', requestId);
        // console.log(`onRawNetworkLoadingFinished: ${requestId}`)
        if (!this.requests.has(requestId)) {
            console.error(`Unknown request: ${requestId}`);
            return;
        }
        this.removePendingRequest(requestId);
        let promise = new Promise((yeah, nah) => {
            this.networkRecorder
                .recordResponseCompleted({
                requestId,
                encodedDataLength,
                timestamp,
            })
                .then(() => yeah(), err => nah(err));
        });
        this.networkRecorder.addPendingTask(promise);
    }
    async onRawNetworkLoadingFailed(event) {
        let { requestId /*, errorText*/ } = event;
        debug('onRawNetworkLoadingFailed', requestId);
        this.removePendingRequest(requestId);
        this.failedRequests.push(requestId);
        // console.log(`Network.loadingFailed ${requestId} - ${errorText}`)
    }
    // private onNetworkResponse(response: Response) {
    // 	// console.log(response.url)
    // }
    removePendingRequest(requestId) {
        this.requests.delete(requestId);
        // console.log(`Pending requests: ${this.requests.size}`)
    }
    onFrameAttached(event) { }
    onDOMContentLoaded(event) {
        this.networkRecorder.recordDOMContentLoadedEvent();
    }
    onNavigate(event) {
        // this.logger.debug(`Frame scheduled navigation ${event}`)
    }
    onFrameStartedLoading(event) {
        // this.pendingFrameTransition = this.env.waitForNavigation({
        // 	waitUntil: 'load',
        // })
        // this.logger.debug(`Page: Frame started loading id:${event.frameId}`)
    }
    onFrameClearedScheduledNavigation(event) {
        // this.logger.debug(`Cancel frame navigation: id:${event.frameId}`)
    }
    onFrameStoppedLoading(event) {
        // this.logger.debug(`Page: Frame stoppped loading id:${event.frameId}`)
    }
}
exports.default = Observer;
