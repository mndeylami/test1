"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Reporter_1 = require("../../Reporter");
class LifecycleObserver {
    constructor(next) {
        this.next = next;
    }
    async before(test) {
        test.reporter.testLifecycle(Reporter_1.TestEvent.BeforeTest, 'test');
        return this.next.before(test);
    }
    async after(test) {
        await this.next.after(test);
        if (test.failed) {
            test.reporter.testLifecycle(Reporter_1.TestEvent.TestFailed, 'test');
        }
        else {
            test.reporter.testLifecycle(Reporter_1.TestEvent.TestSucceeded, 'test');
        }
        test.reporter.testLifecycle(Reporter_1.TestEvent.AfterTest, 'test');
    }
    async beforeStep(test, step) {
        test.reporter.testLifecycle(Reporter_1.TestEvent.BeforeStep, step.name);
        return this.next.beforeStep(test, step);
    }
    async onStepPassed(test, step) {
        await this.next.onStepPassed(test, step);
        test.reporter.testLifecycle(Reporter_1.TestEvent.StepSucceeded, step.name);
    }
    async onStepError(test, step, error) {
        await this.next.onStepError(test, step, error);
        test.reporter.testLifecycle(Reporter_1.TestEvent.StepFailed, step.name);
    }
    async onStepSkipped(test, step) {
        await this.next.onStepSkipped(test, step);
        test.reporter.testLifecycle(Reporter_1.TestEvent.StepSkipped, step.name);
    }
    async afterStep(test, step) {
        await this.next.afterStep(test, step);
        test.reporter.testLifecycle(Reporter_1.TestEvent.AfterStep, step.name);
    }
    async beforeStepAction(test, step, command) {
        test.reporter.testLifecycle(Reporter_1.TestEvent.BeforeStepAction, command);
        return this.next.beforeStepAction(test, step, command);
    }
    async afterStepAction(test, step, command) {
        await this.next.afterStepAction(test, step, command);
        test.reporter.testLifecycle(Reporter_1.TestEvent.AfterStepAction, command);
    }
}
exports.default = LifecycleObserver;
