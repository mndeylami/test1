import Test from '../Test';
import { TestObserver } from './Observer';
import { Step } from '../Step';
import { StructuredError } from '../../utils/StructuredError';
export default class LifecycleObserver implements TestObserver {
    private next;
    constructor(next: TestObserver);
    before(test: Test): Promise<void>;
    after(test: Test): Promise<void>;
    beforeStep(test: Test, step: Step): Promise<void>;
    onStepPassed(test: Test, step: Step): Promise<void>;
    onStepError(test: Test, step: Step, error: StructuredError<any>): Promise<void>;
    onStepSkipped(test: Test, step: Step): Promise<void>;
    afterStep(test: Test, step: Step): Promise<void>;
    beforeStepAction(test: Test, step: Step, command: string): Promise<void>;
    afterStepAction(test: Test, step: Step, command: string): Promise<void>;
}
