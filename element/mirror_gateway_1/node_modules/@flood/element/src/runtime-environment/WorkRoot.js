"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const fs_extra_1 = require("fs-extra");
class WorkRoot {
    constructor(dataRoot, specialSubRoots) {
        this.dataRoot = dataRoot;
        this.specialSubRoots = specialSubRoots;
        // this needs to track SubRoot type
        this.subRoots = ['objects', 'screenshots', 'files', 'results', 'network', 'traces'];
        this.root = path.join(this.dataRoot, 'flood');
        this.ensureCreated();
    }
    ensureCreated() {
        this.subRoots.forEach(r => fs_extra_1.mkdirpSync(path.join(this.root, r)));
    }
    // handles special cases
    rootFor(root) {
        if (this.specialSubRoots.hasOwnProperty(root)) {
            return this.specialSubRoots[root];
        }
        else {
            return path.join(this.root, root);
        }
    }
    join(root, ...segments) {
        return path.join(this.rootFor(root), ...segments);
    }
    testData(filename) {
        return path.join(this.rootFor('test-data'), filename);
    }
}
exports.default = WorkRoot;
// TODO extract
// const ENV_TEST_DATA_DIRECTORY = process.env.TEST_DATA_DIRECTORY
// // If we're on a Grid Node
// export const testDataDirectory = ENV_TEST_DATA_DIRECTORY
// ? ENV_TEST_DATA_DIRECTORY
// : process.env.FLOOD_SEQUENCE_ID ? '/data/flood' : 'tmp/data/flood'
// export const networkDataDirectory = process.env.FLOOD_SEQUENCE_ID
// ? '/data/flood/network'
// : 'tmp/data/flood/network'
// export const tracesDirectory = process.env.FLOOD_SEQUENCE_ID
// ? '/data/flood/screenshots'
// : 'tmp/data/flood/screenshots'
