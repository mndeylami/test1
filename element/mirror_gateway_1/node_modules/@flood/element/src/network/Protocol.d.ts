import { ResourceType } from 'puppeteer';
export interface RawResponse {
    timestamp: number;
    wallTime: number;
    type: ResourceType;
    status: number;
    url: string;
    timing: Object;
    frameId: string;
    loaderId: string;
    requestId: string;
    response: {
        connectionId: number;
        connectionReused: boolean;
        encodedDataLength: number;
        fromDiskCache: boolean;
        fromServiceWorker: boolean;
        headers: {};
        headersText: string;
        mimeType: string;
        protocol: string;
        remoteIPAddress: string;
        remotePort: number;
        requestHeaders: {};
        requestHeadersText: string;
        securityDetails: {};
        securityState: string;
        status: number;
        statusText: string;
        timing: {
            connectEnd: number;
            connectStart: number;
            dnsEnd: number;
            dnsStart: number;
            proxyEnd: number;
            proxyStart: number;
            pushEnd: number;
            pushStart: number;
            receiveHeadersEnd: number;
            requestTime: number;
            sendEnd: number;
            sendStart: number;
            sslEnd: number;
            sslStart: number;
            workerReady: number;
            workerStart: number;
        };
        url: string;
        timestamp: number;
    };
}
export declare class Entry {
    requestId: string;
    frameId: string;
    loaderId: string;
    startedDateTime: Date;
    time: number;
    type: string;
    request: EntryRequest;
    response: EntryResponse;
    cache: {};
    timings: {
        blocked: number;
        dns: number;
        ssl: number;
        connect: number;
        send: number;
        wait: number;
        receive: number;
        _blocked_queueing: number;
    };
    serverIPAddress: string;
    connection: string;
    pageref: string;
    constructor(attrs?: {});
    toJSON(): {
        requestId: string;
        startedDateTime: Date;
        time: number;
        type: string;
        request: {
            timestamp: number;
            method: string;
            url: string;
            httpVersion: string;
            headers: {
                name: string;
                value: string;
            }[];
            queryString: string[];
            headersSize: number;
            bodySize: null;
            cookies: {
                name: string;
                value: string;
                expires: string | null;
                httpOnly: boolean;
                secure: boolean;
            }[];
        };
        response: {
            timestamp: number;
            status: number;
            statusText: string;
            httpVersion: string;
            headers: {
                name: string;
                value: string;
            }[];
            redirectURL: string;
            headersSize: number;
            bodySize: number;
            _transferSize: number;
            cookies: {
                name: string;
                value: string;
                expires: string | null;
                httpOnly: boolean;
                secure: boolean;
                path: string;
            }[];
            content: {
                size: number;
                mimeType: string;
                compression?: number | undefined;
                text: string;
            };
        };
        cache: {};
        timings: {
            blocked: number;
            dns: number;
            ssl: number;
            connect: number;
            send: number;
            wait: number;
            receive: number;
            _blocked_queueing: number;
        };
        serverIPAddress: string;
        connection: string;
        pageref: string;
    };
}
export declare class EntryRequest {
    _epoch: number;
    _issueTime: number;
    _wallIssueTime: number;
    _startTime: number;
    _endTime: number;
    _ttfb: number;
    _responseReceivedTime: number;
    _timing: any;
    timestamp: number;
    method: string;
    url: string;
    httpVersion: string;
    headers: {
        name: string;
        value: string;
    }[];
    queryString: string[];
    headersSize: number;
    bodySize: null;
    postData: string;
    cookies: {
        name: string;
        value: string;
        expires: string | null;
        httpOnly: boolean;
        secure: boolean;
    }[];
    setIssueTime(monotonicTime: number, wallTime: number): void;
    /**
     * @param {number} monotonicTime
     * @return {number}
     */
    pseudoWallTime(monotonicTime: number): number;
    /**
     * @param {!Protocol.Network.ResourceTiming|undefined} timingInfo
     */
    timing: any;
    /**
     * @return {number}
     */
    /**
    * @param {number} x
    */
    endTime: number;
    /**
     * @return {number}
     */
    readonly duration: number;
    /**
     * @return {number}
     */
    readonly latency: number;
    readonly ttfb: number;
    toJSON(): {
        timestamp: number;
        method: string;
        url: string;
        httpVersion: string;
        headers: {
            name: string;
            value: string;
        }[];
        queryString: string[];
        headersSize: number;
        bodySize: null;
        cookies: {
            name: string;
            value: string;
            expires: string | null;
            httpOnly: boolean;
            secure: boolean;
        }[];
    };
}
export declare class EntryResponse {
    timestamp: number;
    status: number;
    statusText: string;
    httpVersion: string;
    headers: {
        name: string;
        value: string;
    }[];
    redirectURL: string;
    headersSize: number;
    bodySize: number;
    _transferSize: number;
    cookies: {
        name: string;
        value: string;
        expires: string | null;
        httpOnly: boolean;
        secure: boolean;
        path: string;
    }[];
    content: {
        size: number;
        mimeType: string;
        compression?: number;
        text: string;
    };
    toJSON(): {
        timestamp: number;
        status: number;
        statusText: string;
        httpVersion: string;
        headers: {
            name: string;
            value: string;
        }[];
        redirectURL: string;
        headersSize: number;
        bodySize: number;
        _transferSize: number;
        cookies: {
            name: string;
            value: string;
            expires: string | null;
            httpOnly: boolean;
            secure: boolean;
            path: string;
        }[];
        content: {
            size: number;
            mimeType: string;
            compression?: number | undefined;
            text: string;
        };
    };
}
export declare class Page {
    _epoch: number;
    startedDateTime: Date;
    id: string;
    title: string;
    pageTimings: {
        onContentLoad: number;
        onLoad: number;
    };
    toJSON(): {
        startedDateTime: Date;
        id: string;
        title: string;
        pageTimings: {
            onContentLoad: number;
            onLoad: number;
        };
    };
}
