"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const puppeteer_1 = require("puppeteer");
const defaultLaunchOptions = {
    args: [],
    handleSIGINT: false,
    headless: true,
    devtools: false,
    chromeVersion: 'puppeteer',
    sandbox: true,
    timeout: 60e3,
    ignoreHTTPSErrors: false,
};
function setupChrome(options) {
    switch (options.chromeVersion) {
        case 'puppeteer':
            options.executablePath = undefined;
            return options;
        case 'stable':
            return setupSystemChrome(options);
        default:
            options.executablePath = options.chromeVersion;
            options.args.push('--disable-gpu');
            options.args.push('--disable-dev-shm-usage');
            return options;
    }
}
function setupSystemChrome(options) {
    switch (process.platform) {
        case 'darwin':
            options.executablePath = '/Applications/Google Chrome.app/Contents/MacOS/Google Chrome';
            break;
        default:
            // TODO search PATH for chrome
            options.executablePath = '/usr/bin/google-chrome-stable';
    }
    options.args.push('--disable-gpu');
    options.args.push('--disable-dev-shm-usage');
    return options;
}
class PuppeteerClient {
    constructor(browser, page) {
        this.browser = browser;
        this.page = page;
        this._isClosed = false;
    }
    async close() {
        if (this._isClosed)
            return;
        await this.browser.close();
        this._isClosed = true;
    }
    async reopenPage() {
        await this.page.close();
        this.page = await this.browser.newPage();
    }
}
exports.PuppeteerClient = PuppeteerClient;
async function launch(passedOptions = {}) {
    let options = Object.assign({}, defaultLaunchOptions, passedOptions);
    if (!options.sandbox) {
        options.args.push('--no-sandbox');
        // launchArgs.args.push("--disable-setuid-sandbox");
    }
    options = setupChrome(options);
    // console.log(JSON.stringify(options, null, 2))
    // console.log('Runner launching client', options)
    // const browser = await launchPuppeteer(options)
    // console.log('whyyy')
    // const page = await browser.newPage()
    // console.log('Runner building client...')
    // return new PuppeteerClient(browser, page)
    // console.log('puppeteer launching client...')
    // return launchPuppeteer(options).then(browser =>
    // browser.newPage().then(page => new PuppeteerClient(browser, page)),
    // )
    const browser = await puppeteer_1.launch(options);
    const page = await browser.newPage();
    return new PuppeteerClient(browser, page);
}
exports.launch = launch;
class NullPuppeteerClient {
    constructor() { }
    async close() {
        return;
    }
    async reopenPage() { }
}
exports.NullPuppeteerClient = NullPuppeteerClient;
