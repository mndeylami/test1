interface EmptyErrorData {
    _kind: 'empty';
}
export declare class StructuredError<T> extends Error {
    message: string;
    _structured: string;
    wrappedUnstructured: boolean;
    kind: string;
    source: string;
    callContext?: string;
    data: T;
    stack?: string;
    originalError?: Error;
    constructor(message: string, data: T, originalError?: Error, source?: string, callContext?: string);
    copyStackFromOriginalError(): StructuredError<T>;
    static liftWithSource<TT>(err: Error, source: string, callContext: string): StructuredError<TT | EmptyErrorData>;
    static isA<TT>(err: Error): boolean;
    static cast<TT>(err: Error): StructuredError<TT> | undefined;
    static wrapBareError<TT>(err: Error, data: TT, source?: string, kind?: string): StructuredError<TT>;
}
export {};
