import { WorkRoot } from '../runtime-environment/types';
import { Assertion } from '../runtime/Assertion';
import { NetworkTraceData, CompositeTraceData } from '../Reporter';
interface ErrorLike {
    message: string;
    stack?: string | string[];
}
export interface IObjectTrace {
    addError(error: ErrorLike): void;
    addNetworkTrace(trace: NetworkTraceData): Promise<void>;
    addScreenshot(screenshotURL: string): void;
    addAssertion(assertion: Assertion): void;
    isEmpty: boolean;
    toObject(): CompositeTraceData;
}
export declare const NullObjectTrace: {
    isEmpty: boolean;
    addError(error: ErrorLike): void;
    addNetworkTrace(trace: NetworkTraceData): Promise<void>;
    addScreenshot(screenshotURL: string): void;
    addAssertion(assertion: Assertion): void;
    toObject(): CompositeTraceData;
};
export declare class ObjectTrace {
    private workRoot;
    label: string;
    errors: ErrorLike[];
    assertions: Assertion[];
    screenshots: string[];
    networkTraces: string[];
    constructor(workRoot: WorkRoot, label: string, errors?: ErrorLike[], assertions?: Assertion[], screenshots?: string[], networkTraces?: string[]);
    addError(error: ErrorLike): void;
    addNetworkTrace(trace: NetworkTraceData): Promise<void>;
    addScreenshot(screenshotURL: string): void;
    addAssertion(assertion: Assertion): void;
    readonly isEmpty: boolean;
    toObject(): CompositeTraceData;
}
export {};
