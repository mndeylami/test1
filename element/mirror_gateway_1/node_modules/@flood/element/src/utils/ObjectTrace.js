"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cuid = require("cuid");
const util_1 = require("util");
const fs_1 = require("fs");
const writeFileAsync = util_1.promisify(fs_1.writeFile);
exports.NullObjectTrace = {
    isEmpty: true,
    addError(error) { },
    async addNetworkTrace(trace) { },
    addScreenshot(screenshotURL) { },
    addAssertion(assertion) { },
    toObject() {
        return {
            op: 'object',
            label: '',
            objects: [],
            errors: [],
            assertions: [],
            objectTypes: [],
        };
    },
};
class ObjectTrace {
    constructor(workRoot, label, errors = [], assertions = [], screenshots = [], networkTraces = []) {
        this.workRoot = workRoot;
        this.label = label;
        this.errors = errors;
        this.assertions = assertions;
        this.screenshots = screenshots;
        this.networkTraces = networkTraces;
    }
    addError(error) {
        let { message, stack } = error;
        this.errors.push({
            message,
            stack,
        });
    }
    async addNetworkTrace(trace) {
        let filePath = this.workRoot.join('network', `${cuid()}.json`);
        this.networkTraces.push(filePath);
        return writeFileAsync(filePath, JSON.stringify(trace)).catch(err => {
            console.error(`Object Trace writing ERROR: ${err.message}`);
        });
    }
    addScreenshot(screenshotURL) {
        this.screenshots.push(screenshotURL);
    }
    addAssertion(assertion) {
        this.assertions.push(assertion);
    }
    get isEmpty() {
        let { screenshots, networkTraces, assertions, errors } = this;
        return (screenshots.length === 0 &&
            networkTraces.length === 0 &&
            assertions.length === 0 &&
            errors.length === 0);
    }
    toObject() {
        let { label, screenshots, networkTraces, assertions, errors } = this;
        let objectTypes = [];
        let objects = [];
        screenshots.forEach(screenshot => {
            objects.push(screenshot);
            objectTypes.push('screenshot');
        });
        networkTraces.forEach(trace => {
            objects.push(trace);
            objectTypes.push('trace');
        });
        return {
            op: 'object',
            label,
            objects,
            errors,
            assertions,
            objectTypes,
        };
    }
}
exports.ObjectTrace = ObjectTrace;
