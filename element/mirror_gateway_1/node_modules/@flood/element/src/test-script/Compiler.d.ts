import { ITestScript, TestScriptError, TestScriptOptions } from '../TestScript';
import * as ts from 'typescript';
import { VMScript } from 'vm2';
declare type sourceKinds = 'typescript' | 'javascript';
export declare class TypeScriptTestScript implements ITestScript {
    originalSource: string;
    originalFilename: string;
    sandboxedBasename: string;
    sandboxedFilename: string;
    sandboxedRelativeFilename: string;
    source: string;
    sourceMap: string;
    private sourceUnmapper;
    floodChromeErrors: string[];
    sourceKind: sourceKinds;
    private vmScriptMemo;
    private diagnostics;
    testScriptOptions: TestScriptOptions;
    constructor(originalSource: string, originalFilename: string, options?: TestScriptOptions);
    readonly hasErrors: boolean;
    readonly formattedErrorString: string;
    readonly compilerOptions: ts.CompilerOptions;
    compile(): Promise<TypeScriptTestScript>;
    filenameMapper(filename: string): string;
    readonly vmScript: VMScript;
    readonly isFloodElementCorrectlyImported: boolean;
    readonly testName: string;
    readonly testDescription: string;
    private parsedCommentsMemo;
    private parsedComments;
    isScriptError(error: Error): boolean;
    liftError(error: Error): TestScriptError;
    maybeLiftError(error: Error): Error;
    filterAndUnmapStack(input: string | Error | undefined): string[];
}
export {};
