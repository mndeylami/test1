import { ConcreteLaunchOptions, PuppeteerClient } from './driver/Puppeteer';
import { Logger } from 'winston';
import { EvaluatedScript } from './runtime/EvaluatedScript';
import { TestObserver } from './runtime/test-observers/Observer';
import { TestSettings, ConcreteTestSettings } from './runtime/Settings';
import { IReporter } from './Reporter';
import { AsyncFactory } from './utils/Factory';
export interface TestCommander {
    on(event: 'rerun-test', listener: () => void): this;
}
export interface IRunner {
    run(testScriptFactory: AsyncFactory<EvaluatedScript>): Promise<void>;
    stop(): Promise<void>;
}
declare class Looper {
    iterations: number;
    private timeout;
    private cancelled;
    private loopCount;
    done: Promise<void>;
    private doneResolve;
    constructor(settings: ConcreteTestSettings, running?: boolean);
    stop(): void;
    kill(): Promise<void>;
    _killer: () => void;
    killer: () => void;
    finish(): void;
    readonly continueLoop: boolean;
    run(iterator: (iteration: number) => Promise<void>): Promise<number>;
}
export declare class Runner {
    private clientFactory;
    protected testCommander: TestCommander | undefined;
    private reporter;
    protected logger: Logger;
    private testSettingOverrides;
    private launchOptionOverrides;
    private testObserverFactory;
    protected looper: Looper;
    running: boolean;
    clientPromise: Promise<PuppeteerClient> | undefined;
    constructor(clientFactory: AsyncFactory<PuppeteerClient>, testCommander: TestCommander | undefined, reporter: IReporter, logger: Logger, testSettingOverrides: TestSettings, launchOptionOverrides: Partial<ConcreteLaunchOptions>, testObserverFactory?: (t: TestObserver) => TestObserver);
    stop(): Promise<void>;
    run(testScriptFactory: AsyncFactory<EvaluatedScript>): Promise<void>;
    launchClient(testScript: EvaluatedScript): Promise<PuppeteerClient>;
    runTestScript(testScript: EvaluatedScript, clientPromise: Promise<PuppeteerClient>): Promise<void>;
}
export declare class PersistentRunner extends Runner {
    testScriptFactory: AsyncFactory<EvaluatedScript> | undefined;
    clientPromise: Promise<PuppeteerClient> | undefined;
    private stopped;
    constructor(clientFactory: AsyncFactory<PuppeteerClient>, testCommander: TestCommander | undefined, reporter: IReporter, logger: Logger, testSettingOverrides: TestSettings, launchOptionOverrides: Partial<ConcreteLaunchOptions>, testObserverFactory?: (t: TestObserver) => TestObserver);
    rerunTest(): void;
    runNextTest(): Promise<void>;
    stop(): Promise<void>;
    waitUntilStopped(): Promise<void>;
    run(testScriptFactory: AsyncFactory<EvaluatedScript>): Promise<void>;
}
export {};
