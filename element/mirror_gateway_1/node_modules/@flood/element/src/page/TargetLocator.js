"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ElementHandle_1 = require("./ElementHandle");
const Browser_1 = require("../runtime/Browser");
/**
 * @internal
 */
class TargetLocator {
    constructor(page, apply) {
        this.page = page;
        this.apply = apply;
    }
    async activeElement() {
        let jsHandle = await this.page.evaluateHandle(() => document.activeElement || document.body);
        if (!jsHandle)
            return null;
        let element = jsHandle.asElement();
        if (!element)
            return null;
        return new ElementHandle_1.ElementHandle(element).initErrorString();
    }
    /**
     * Navigates to the topmost frame
     */
    async defaultContent() {
        this.apply(null);
    }
    /**
     * Changes the active target to another frame.
     *
     * Accepts either:
     *
     * number: Switch to frame by index in window.frames,
     * string: Switch to frame by frame.name or frame.id, whichever matches first,
     * ElementHandle: Switch to a frame using the supplied ElementHandle of a frame.
     *
     * @param id number | string | ElementHandle
     */
    async frame(id) {
        let nextFrame;
        if (id === null) {
            this.defaultContent();
            return;
        }
        let frames = Browser_1.getFrames(this.page.frames());
        if (typeof id === 'number') {
            // Assume frame index
            let frameElementName = await this.page.evaluate((index) => {
                // NOTE typescript lib.dom lacks proper index signature for frames: Window to work
                let frame = window.frames[Number(index)];
                if (!frame)
                    throw Error(`No frame found at index: ${index}`);
                return frame.name || frame.id;
            }, id);
            nextFrame = frames.find(frame => frame.name() === frameElementName) || null;
            if (!nextFrame)
                throw new Error(`Could not match frame by name or id: '${frameElementName}'`);
            this.apply(nextFrame);
        }
        else if (typeof id === 'string') {
            // Assume id or name attr
            nextFrame = frames.find(frame => frame.name() === id) || null;
            if (!nextFrame)
                throw new Error(`Could not match frame by name or id: '${id}'`);
            this.apply(nextFrame);
        }
        else if (id instanceof ElementHandle_1.ElementHandle) {
            let tagName = await id.tagName();
            if (!tagName || !['FRAME', 'WINDOW', 'IFRAME'].includes(tagName))
                throw new Error(`ElementHandle supplied to frame() must be a reference to a <frame>, window, or <iframe> element, got <${(tagName &&
                    tagName.toLowerCase()) ||
                    null}>`);
            let name = await id.getProperty('name');
            if (!name)
                name = await id.getProperty('id');
            nextFrame = frames.find(frame => frame.name() === name) || null;
            if (!nextFrame)
                throw new Error(`Could not match frame by name or id: '${name}'`);
            this.apply(nextFrame);
        }
    }
}
exports.TargetLocator = TargetLocator;
