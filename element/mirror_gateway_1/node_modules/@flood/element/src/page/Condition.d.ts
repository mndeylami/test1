import { Page, EvaluateFn, Frame } from 'puppeteer';
import { Locator } from './types';
import { NullableLocatable } from '../runtime/types';
export { NullableLocatable };
interface ConditionSettings {
    waitTimeout: number;
}
/**
 * A Condition represents a predicate which can be used to wait for an <[ElementHandle]>. They are generally created by using <[Until]>'s helper methods.
 * @docOpaque
 */
export declare abstract class Condition {
    desc: string;
    hasWaitFor: boolean;
    settings: ConditionSettings;
    constructor(desc?: string);
    abstract toString(): string;
    abstract waitFor(frame: Frame, page?: Page): Promise<any>;
    waitForEvent(page: Page): Promise<any>;
    protected readonly timeout: number;
}
export declare abstract class LocatorCondition extends Condition {
    desc: string;
    pageFunc: EvaluateFn | null;
    pageFuncArgs: any[];
    locator: Locator;
    constructor(desc: string, locator: NullableLocatable, pageFunc: EvaluateFn | null, ...pageFuncArgs: any[]);
    /**
     * @internal
     */
    protected locatableToLocator(el: NullableLocatable): Locator;
}
export declare abstract class ElementCondition extends LocatorCondition {
    constructor(desc: string | undefined, locator: NullableLocatable);
    abstract toString(): string;
    readonly locatorPageFunc: EvaluateFn;
    waitFor(frame: Frame, page?: Page): Promise<boolean>;
}
