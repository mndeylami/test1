"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Escape_1 = require("../utils/Escape");
const LinkText_1 = require("./locators/LinkText");
const VisibleTextLocator_1 = require("./locators/VisibleTextLocator");
const CSS_1 = require("./locators/CSS");
const TagName_1 = require("./locators/TagName");
const XPath_1 = require("./locators/XPath");
const Locator_1 = require("./Locator");
/**
 * By is used to create <[Locator]>s to find Elements or use in any place which accepts a Locator or <[Locatable]>.
 *
 * @class By
 */
class By {
    constructor(command, ...args) {
        this.command = command;
        this.args = args;
    }
    /**
     * Locates an element using a CSS (jQuery) style selector
     * @param selector
     */
    static css(selector, debugString) {
        if (debugString === undefined) {
            debugString = `By.css('${selector}')`;
        }
        return new CSS_1.CSSLocator(selector, debugString);
    }
    /**
     * Locates elements by the ID attribute. This locator uses the CSS selector
     * `*[id="$ID"]`, _not_ `document.getElementById`.
     *
     * @param {string} id The ID to search for
     */
    static id(id) {
        if (id.startsWith('#'))
            id = id.slice(1);
        return this.css(`*[id="${Escape_1.escapeCss(id)}"]`, `By.id('#${id}')`);
    }
    /**
     * Locates link elements whose `textContent` matches the given
     * string.
     *
     * @param {string} text The link text to search for.
     */
    static linkText(text) {
        return new LinkText_1.LinkTextLocator(text, false, `By.linkText('${text}')`);
    }
    /**
     * Locates link elements whose `textContent` contains the given
     * substring.
     *
     * @param {string} text The substring to check for in a link's visible text.
     */
    static partialLinkText(text) {
        return new LinkText_1.LinkTextLocator(text, true, `By.partialLinkText('${text}')`);
    }
    /**
     * Locates all elements whose `textContent` equals the given
     * substring and is not hidden by CSS.
     *
     * @param {string} text The string to check for in a elements's visible text.
     */
    static visibleText(text) {
        return new VisibleTextLocator_1.VisibleTextLocator(text, false, `By.visibleText('${text}')`);
    }
    /**
     * Locates all elements whose `textContent` contains the given
     * substring and is not hidden by CSS.
     *
     * @param {string} text The substring to check for in a elements's visible text.
     */
    static partialVisibleText(text) {
        return new VisibleTextLocator_1.VisibleTextLocator(text, true, `By.partialVisibleText('${text}')`);
    }
    /**
     * Locates an elements by evaluating a JavaScript expression.
     * The result of this expression must be an element or list of elements.
     *
     * @param {!(string|Function)} script The script to execute.
     * @param {...*} var_args The arguments to pass to the script.
     */
    static js(script, ...args) {
        let locator = new Locator_1.BaseLocator('By.js(function)');
        locator.pageFunc = script;
        locator.pageFuncMany = script;
        locator.pageFuncArgs = args;
        return locator;
    }
    /**
     * Locates elements whose `name` attribute has the given value.
     *
     * @param {string} value The name attribute to search for.
     * @return {!By} The new locator.
     */
    static nameAttr(value) {
        return By.css(`*[name="${Escape_1.escapeCss(value)}"]`, `By.nameAttr('${value}')`);
    }
    /**
     * Locates an element where the attribute matches the value.
     *
     * **Example:**
     * By.attr('name', 'frame-name')
     */
    static attr(tagName, attrName, attrValue) {
        return By.css(`${Escape_1.escapeCss(tagName).toLowerCase()}[${Escape_1.escapeCss(attrName)}="${Escape_1.escapeCss(attrValue)}"]`, `By.attr('${tagName}','${attrName}','${attrValue}')`);
    }
    /**
     * Locates elements with a given tag name.
     *
     * @param {string} name The tag name to search for.
     * @return {!By} The new locator.
     */
    static tagName(name) {
        return new TagName_1.TagNameLocator(name);
    }
    /**
     * Locates elements matching a XPath selector. Care should be taken when
     * using an XPath selector with a {@link webdriver.WebElement} as WebDriver
     * will respect the context in the specified in the selector. For example,
     * given the selector `//div`, WebDriver will search from the document root
     * regardless of whether the locator was used with a WebElement.
     *
     * @param {string} xpath The XPath selector to use.
     * @return {!By} The new locator.
     * @see http://www.w3.org/TR/xpath/
     */
    static xpath(xpath) {
        return new XPath_1.XPathLocator(xpath);
    }
}
exports.By = By;
