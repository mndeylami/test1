import { Locator } from './types';
import { EvaluateFn } from 'puppeteer';
/**
 * By is used to create <[Locator]>s to find Elements or use in any place which accepts a Locator or <[Locatable]>.
 *
 * @class By
 */
export declare class By {
    readonly command: string;
    readonly args: string[];
    constructor(command: string, ...args: any[]);
    /**
     * Locates an element using a CSS (jQuery) style selector
     * @param selector
     */
    static css(selector: string, debugString?: string): Locator;
    /**
     * Locates elements by the ID attribute. This locator uses the CSS selector
     * `*[id="$ID"]`, _not_ `document.getElementById`.
     *
     * @param {string} id The ID to search for
     */
    static id(id: string): Locator;
    /**
     * Locates link elements whose `textContent` matches the given
     * string.
     *
     * @param {string} text The link text to search for.
     */
    static linkText(text: string): Locator;
    /**
     * Locates link elements whose `textContent` contains the given
     * substring.
     *
     * @param {string} text The substring to check for in a link's visible text.
     */
    static partialLinkText(text: string): Locator;
    /**
     * Locates all elements whose `textContent` equals the given
     * substring and is not hidden by CSS.
     *
     * @param {string} text The string to check for in a elements's visible text.
     */
    static visibleText(text: string): Locator;
    /**
     * Locates all elements whose `textContent` contains the given
     * substring and is not hidden by CSS.
     *
     * @param {string} text The substring to check for in a elements's visible text.
     */
    static partialVisibleText(text: string): Locator;
    /**
     * Locates an elements by evaluating a JavaScript expression.
     * The result of this expression must be an element or list of elements.
     *
     * @param {!(string|Function)} script The script to execute.
     * @param {...*} var_args The arguments to pass to the script.
     */
    static js(script: EvaluateFn, ...args: any[]): Locator;
    /**
     * Locates elements whose `name` attribute has the given value.
     *
     * @param {string} value The name attribute to search for.
     * @return {!By} The new locator.
     */
    static nameAttr(value: string): Locator;
    /**
     * Locates an element where the attribute matches the value.
     *
     * **Example:**
     * By.attr('name', 'frame-name')
     */
    static attr(tagName: string, attrName: string, attrValue: string): Locator;
    /**
     * Locates elements with a given tag name.
     *
     * @param {string} name The tag name to search for.
     * @return {!By} The new locator.
     */
    static tagName(name: string): Locator;
    /**
     * Locates elements matching a XPath selector. Care should be taken when
     * using an XPath selector with a {@link webdriver.WebElement} as WebDriver
     * will respect the context in the specified in the selector. For example,
     * given the selector `//div`, WebDriver will search from the document root
     * regardless of whether the locator was used with a WebElement.
     *
     * @param {string} xpath The XPath selector to use.
     * @return {!By} The new locator.
     * @see http://www.w3.org/TR/xpath/
     */
    static xpath(xpath: string): Locator;
}
