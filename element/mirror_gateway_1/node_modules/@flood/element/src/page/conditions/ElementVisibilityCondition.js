"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Condition_1 = require("../Condition");
class ElementVisibilityCondition extends Condition_1.ElementCondition {
    constructor(desc, locator, ...args) {
        super(desc, locator);
        this.pageFunc = (node, waitForVisible, waitForHidden) => {
            if (!node)
                return false;
            const style = window.getComputedStyle(node);
            const isVisible = style && style.visibility !== 'hidden' && hasVisibleBoundingBox();
            return waitForVisible === isVisible || waitForHidden === !isVisible;
            /**
             * @return {boolean}
             */
            function hasVisibleBoundingBox() {
                const rect = node.getBoundingClientRect();
                return !!(rect.top || rect.bottom || rect.width || rect.height);
            }
        };
        this.pageFuncArgs = args;
    }
    toString() {
        return 'waiting for element to be visible on the page';
    }
}
exports.ElementVisibilityCondition = ElementVisibilityCondition;
class ElementLocatedCondition extends Condition_1.ElementCondition {
    constructor(desc, locator, ...args) {
        super(desc, locator);
        this.pageFunc = (node, isPresent = true) => {
            return !!node === isPresent;
        };
        this.pageFuncArgs = args;
    }
    toString() {
        return 'waiting for element to be located on the page';
    }
}
exports.ElementLocatedCondition = ElementLocatedCondition;
class ElementsLocatedCondition extends Condition_1.ElementCondition {
    constructor(desc, locator, ...args) {
        super(desc, locator);
        this.desc = desc;
        this.pageFunc = (nodes, count = 1) => {
            if (typeof nodes === 'undefined')
                return false;
            return nodes.length >= count;
        };
        this.pageFuncArgs = args;
    }
    toString() {
        let [count] = this.pageFuncArgs;
        return `waiting for ${count} elements to be located on the page`;
    }
    get locatorPageFunc() {
        return this.locator.pageFuncMany;
    }
}
exports.ElementsLocatedCondition = ElementsLocatedCondition;
