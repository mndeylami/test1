"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const Types_1 = require("../runtime/errors/Types");
const interpretPuppeteerError_1 = require("../runtime/errors/interpretPuppeteerError");
const StructuredError_1 = require("../utils/StructuredError");
const By_1 = require("./By");
const debugFactory = require("debug");
const Enums_1 = require("./Enums");
const debug = debugFactory('element:page:element-handle');
/**
 * @internal
 */
async function getProperty(element, prop) {
    if (!element) {
        return null;
    }
    else {
        let handle = await element.getProperty(prop);
        let value = await handle.jsonValue();
        handle.dispose();
        return value;
    }
}
/**
 * @internal
 */
function wrapDescriptiveError(...errorInterpreters) {
    errorInterpreters.push(interpretPuppeteerError_1.default);
    return function (target, propertyKey, descriptor) {
        let originalFn = descriptor.value;
        descriptor.value = async function (...args) {
            // capture the stack trace at call-time
            const calltimeError = new Error();
            Error.captureStackTrace(calltimeError);
            const calltimeStack = calltimeError.stack;
            // const elementHandle = this
            try {
                return await originalFn.apply(this, args);
            }
            catch (e) {
                debug('interpreting', propertyKey, e);
                const newError = Types_1.interpretError(errorInterpreters, e, this, propertyKey, args);
                // errorInterpreters.reduce((err, interp) => {
                // return err ? err : interp(e, this, propertyKey, ...args)
                // }, undefined) || e
                const sErr = StructuredError_1.StructuredError.liftWithSource(newError, 'elementHandle', `${this.toErrorString()}.${propertyKey}`);
                sErr.stack = calltimeStack;
                // attach the call-time stack
                // newError.stack = calltimeStack
                throw sErr;
            }
        };
    };
}
/**
 * @internal
 */
function domError(err, target, key, callCtx, options) {
    if (err.message.includes('Node is detached from document')) {
        return new StructuredError_1.StructuredError('dom error during action', {
            _kind: 'action',
            action: key,
            kind: 'node-detached',
        }, err);
    }
}
/**
 * ElementHandle represents a remote element in the DOM of the browser. It implements useful methods for querying and interacting with this DOM element.
 *
 * All methods on this class are asynchronous and must be used with `await` to wait for the result to fulfill from the browser.
 */
class ElementHandle {
    constructor(elt) {
        /**
         * @internal
         */
        this.errorString = '<element-handle>';
        this.element = elt;
    }
    async initErrorString(foundVia) {
        debug('initErrorString', foundVia);
        let tag = await this.tagName();
        const id = await this.getId();
        if (tag === null)
            tag = 'element-tag';
        let estr = `<${tag.toLowerCase()}`;
        if (id !== null) {
            estr += ` id='#${id}'`;
        }
        if (foundVia !== null) {
            estr += ` found using '${foundVia}'`;
        }
        estr += '>';
        this.errorString = estr;
        return this;
    }
    bindBrowser(sss) {
        this.screenshotSaver = sss;
    }
    toErrorString() {
        return this.errorString;
    }
    async find(context, node) {
        return this;
    }
    async findMany(context, node) {
        return [this];
    }
    get pageFuncArgs() {
        return [this.element];
    }
    get pageFunc() {
        return (element, node) => element;
    }
    get pageFuncMany() {
        return (element, node) => [element];
    }
    /**
     * Sends a click event to the element attached to this handle. If the element is
     * currently outside the viewport it will first scroll to that element.
     */
    async click(options) {
        return this.element.click(options);
    }
    /**
     * Sends a click event to the element attached to this handle. If the element is
     * currently outside the viewport it will first scroll to that element.
     */
    async doubleClick(options) {
        return this.element.click(Object.assign({ clickCount: 2 }, options));
    }
    /**
     * Schedules a command to clear the value of this element.
     * This command has no effect if the underlying DOM element is neither a text
     * INPUT, SELECT, or a TEXTAREA element.
     */
    async clear() {
        let tagName = await this.tagName();
        if (tagName === 'SELECT') {
            await this.element
                .executionContext()
                .evaluate((element) => (element.selectedIndex = -1), this.element);
        }
        else if (tagName === 'INPUT') {
            await this.element
                .executionContext()
                .evaluate((element) => (element.value = ''), this.element);
        }
    }
    /**
     * Sends focus to this element so that it receives keyboard inputs.
     */
    async focus() {
        return await this.element.focus();
    }
    /**
     * Clears focus from this element so that it will no longer receive keyboard inputs.
     */
    async blur() {
        return await this.element
            .executionContext()
            .evaluate((node) => node.blur(), this.element);
    }
    /**
     * Sends a series of key modifiers to the element.
     */
    async sendKeys(...keys) {
        let handle = this.element.asElement();
        if (!handle)
            return;
        for (const key of keys) {
            if (Object.values(Enums_1.Key).includes(key)) {
                await handle.press(key);
            }
            else {
                await handle.type(key);
            }
        }
    }
    /**
     * Sends a series of key presses to the element to simulate a user typing on the keyboard. Use this to fill in input fields.
     */
    async type(text) {
        let handle = this.element.asElement();
        if (!handle)
            return;
        return handle.type(text);
    }
    /**
     * Takes a screenshot of this element and saves it to the results folder with a random name.
     */
    async takeScreenshot(options) {
        return this.screenshotSaver.saveScreenshot(async (path) => {
            debug(`Saving screenshot to: ${path}`);
            console.log(`Saving screenshot to: ${path}`);
            const handle = this.element.asElement();
            if (!handle)
                return false;
            await handle.screenshot(Object.assign({ path }, options));
            return true;
        });
    }
    // TODO wrap
    async findElement(locator) {
        if (typeof locator === 'string') {
            locator = By_1.By.css(locator);
        }
        return locator.find(this.element.executionContext(), this.element);
    }
    /**
     * Locates all elements using the supplied <[Locator]>, returning an array of <[ElementHandle]>'s
     */
    async findElements(locator) {
        if (typeof locator === 'string') {
            locator = By_1.By.css(locator);
        }
        return locator.findMany(this.element.executionContext(), this.element);
    }
    /**
     * Fetches the remote elements `tagName` property.
     */
    async tagName() {
        return getProperty(this.element, 'tagName');
    }
    /**
     * Fetches the remote elements `id` attribute.
     */
    async getId() {
        return this.getAttribute('id');
    }
    /**
     * Fetches the value of an attribute on this element
     */
    async getAttribute(key) {
        let handle = this.element.asElement();
        if (!handle)
            return null;
        return handle
            .executionContext()
            .evaluate((element, key) => element.getAttribute(key), this.element, key);
    }
    /**
     * getProperty
     */
    async getProperty(key) {
        return getProperty(this.element, key);
    }
    /**
     * If the remote element is selectable (such as an `<option>` or `input[type="checkbox"]`) this methos will indicate whether it is selected.
     */
    async isSelected() {
        if (await !this.isSelectable()) {
            throw new Error('Element is not selectable');
        }
        var propertyName = 'selected';
        let tagName = await this.tagName();
        var type = tagName && tagName.toUpperCase();
        if ('CHECKBOX' == type || 'RADIO' == type) {
            propertyName = 'checked';
        }
        let value = getProperty(this.element, propertyName);
        return !!value;
    }
    /**
     * Checks whether the remote element is selectable. An element is selectable if it is an `<option>` or `input[type="checkbox"]` or radio button.
     */
    async isSelectable() {
        let tagName = await this.tagName();
        if (tagName === 'OPTION') {
            return true;
        }
        if (tagName === 'INPUT') {
            let type = tagName.toLowerCase();
            return type == 'checkbox' || type == 'radio';
        }
        return false;
    }
    /**
     * Checks whether the remote element is displayed in the DOM and is visible to the user without being hidden by CSS or occluded by another element.
     */
    async isDisplayed() {
        let box = await this.element.boundingBox();
        return box !== null;
    }
    /**
     * Checks whether the remote element is enabled. Typically this means it does not have a `disabled` property or attribute applied.
     */
    async isEnabled() {
        let disabled = await this.getAttribute('disabled');
        return disabled === null;
    }
    /**
     * Get the visible (i.e. not hidden by CSS) innerText of this element, including sub-elements, without any leading or trailing whitespace.
     *
     * @returns {Promise<string>}
     * @memberof ElementHandle
     */
    async text() {
        return this.element
            .executionContext()
            .evaluate((element) => element.textContent && element.textContent.trim(), this.element);
    }
    /**
     * Returns a promise that will be resolved with the element's size
     * as a {width:number, height:number} object
     */
    async size() {
        let box = await this.element.boundingBox();
        if (!box)
            return { width: 0, height: 0 };
        let { width, height } = box;
        return { width, height };
    }
    /**
     * Returns a promise that will be resolved to the element's location
     * as a {x:number, y:number} object.
     */
    async location() {
        let box = await this.element.boundingBox();
        if (!box)
            return { x: 0, y: 0 };
        let { x, y } = box;
        return { x, y };
    }
    // TODO fix with better typings
    get elementClient() {
        return this.element['_client'];
    }
    // TODO fix with better typings
    get elementRemoteObject() {
        return this.element['_remoteObject'];
    }
    async dispose() {
        return this.element.dispose();
    }
    async highlight() {
        await this.elementClient.send('Overlay.highlightNode', {
            highlightConfig: {
                showInfo: true,
                displayAsMaterial: true,
                borderColor: { r: 76, g: 175, b: 80, a: 1 },
                contentColor: { r: 76, g: 175, b: 80, a: 0.24 },
                shapeColor: { r: 76, g: 175, b: 80, a: 0.24 },
            },
            objectId: this.elementRemoteObject.objectId,
        });
    }
    async clearHighlights() {
        await this.elementClient.send('Overlay.hideHighlight', {});
    }
}
__decorate([
    wrapDescriptiveError(domError),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], ElementHandle.prototype, "click", null);
__decorate([
    wrapDescriptiveError(domError),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], ElementHandle.prototype, "doubleClick", null);
__decorate([
    wrapDescriptiveError(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], ElementHandle.prototype, "clear", null);
__decorate([
    wrapDescriptiveError(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], ElementHandle.prototype, "focus", null);
__decorate([
    wrapDescriptiveError(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], ElementHandle.prototype, "blur", null);
__decorate([
    wrapDescriptiveError(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], ElementHandle.prototype, "sendKeys", null);
__decorate([
    wrapDescriptiveError(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], ElementHandle.prototype, "type", null);
__decorate([
    wrapDescriptiveError(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], ElementHandle.prototype, "takeScreenshot", null);
exports.ElementHandle = ElementHandle;
